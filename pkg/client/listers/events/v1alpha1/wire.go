/*
Copyright 2018 The Argo Project Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/argoproj/argo-events/pkg/apis/events/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WireLister helps list Wires.
type WireLister interface {
	// List lists all Wires in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Wire, err error)
	// Wires returns an object that can list and get Wires.
	Wires(namespace string) WireNamespaceLister
	WireListerExpansion
}

// wireLister implements the WireLister interface.
type wireLister struct {
	indexer cache.Indexer
}

// NewWireLister returns a new WireLister.
func NewWireLister(indexer cache.Indexer) WireLister {
	return &wireLister{indexer: indexer}
}

// List lists all Wires in the indexer.
func (s *wireLister) List(selector labels.Selector) (ret []*v1alpha1.Wire, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Wire))
	})
	return ret, err
}

// Wires returns an object that can list and get Wires.
func (s *wireLister) Wires(namespace string) WireNamespaceLister {
	return wireNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WireNamespaceLister helps list and get Wires.
type WireNamespaceLister interface {
	// List lists all Wires in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Wire, err error)
	// Get retrieves the Wire from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Wire, error)
	WireNamespaceListerExpansion
}

// wireNamespaceLister implements the WireNamespaceLister
// interface.
type wireNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Wires in the indexer for a given namespace.
func (s wireNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Wire, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Wire))
	})
	return ret, err
}

// Get retrieves the Wire from the indexer for a given namespace and name.
func (s wireNamespaceLister) Get(name string) (*v1alpha1.Wire, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("wire"), name)
	}
	return obj.(*v1alpha1.Wire), nil
}
